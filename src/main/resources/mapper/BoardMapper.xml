<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.mygumi.insider.mapper.BoardMapper">

	<!-- 게시글 목록 출력 -->
	<select id="getBoards" resultType="boardDto">
		SELECT boardNo, title, hit, folder, saveName, originName, LEFT(content, 50) content,
		CASE
			WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 1 THEN
				CONCAT(MINUTE(TIMEDIFF(NOW(), createDate)), '분 전')
			WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 24 THEN
				CONCAT(HOUR(TIMEDIFF(NOW(), createDate)), '시간 전')
			ELSE DATE_FORMAT(createDate, '%Y-%m-%d')
			END AS createDate
		FROM board
		WHERE status = 1
		ORDER BY boardNo DESC;
	</select>

	<!-- 해당 게시물의 좋아요 여부 판단 -->
		<select id="getLikeStatus" parameterType="String" resultType="long">
			SELECT count(Id)
			FROM likes
			WHERE boardNo = #{boardNo} AND Id = #{userId};
		</select>
	
	<!-- 조회수 하나 늘리기 -->
	<update id="updateHit" parameterType="String">
		UPDATE board
		SET hit = hit + 1
		WHERE boardNo = #{boardNo};
	</update>
	
	<!-- 게시글 상세 내용 출력 -->
	<select id="getBoardDetail" parameterType="String" resultType="boardDto">
		SELECT boardNo, title, content, hit, writerId, folder, saveName, originName, usernickname AS writerName, thumbnail_image_url AS writerImg,
		CASE
			WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 1 THEN
				CONCAT(MINUTE(TIMEDIFF(NOW(), createDate)), '분 전')
			WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 24 THEN
				CONCAT(HOUR(TIMEDIFF(NOW(), createDate)), '시간 전')
			ELSE DATE_FORMAT(createDate, '%Y-%m-%d')
			END AS createDate,
		CASE
			WHEN HOUR(TIMEDIFF(NOW(), updateDate)) <![CDATA[ <= ]]> 1 THEN
				CONCAT(MINUTE(TIMEDIFF(NOW(), updateDate)), '분 전')
			WHEN HOUR(TIMEDIFF(NOW(), updateDate)) <![CDATA[ <= ]]> 24 THEN
				CONCAT(HOUR(TIMEDIFF(NOW(), updateDate)), '시간 전')
			ELSE DATE_FORMAT(updateDate, '%Y-%m-%d')
			END AS updateDate,
		(SELECT COUNT(Id)
			FROM likes
			WHERE boardNo = #{boardNo}) AS likesNum
			FROM board
		LEFT JOIN member ON(member.id = board.writerId)
		WHERE boardNo = #{boardNo};
	</select>
	
	<!-- 게시글의 댓글 출력 -->
	<select id="getComments" parameterType="String" resultType="commentDto">
		SELECT commentNo, content, usernickname AS writerName, writerId, status, thumbnail_image_url AS writerImg,
		CASE
			WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 1 THEN
				CONCAT(MINUTE(TIMEDIFF(NOW(), createDate)), '분 전')
			WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 24 THEN
				CONCAT(HOUR(TIMEDIFF(NOW(), createDate)), '시간 전')
			ELSE DATE_FORMAT(createDate, '%Y-%m-%d')
			END AS createDate
		FROM comment
		LEFT JOIN member ON(member.id = comment.writerId)
		WHERE boardNo = #{boardNo}
		ORDER BY commentNo;
	</select>
	
	<!-- 게시글의 대댓글 출력 -->
	<select id="getReplys" parameterType="String" resultType="replyCommentDto">
		SELECT replyNo, commentNo, content, usernickname AS writerName, writerId, status, thumbnail_image_url AS writerImg,
		CASE
			WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 1 THEN
				CONCAT(MINUTE(TIMEDIFF(NOW(), createDate)), '분 전')
			WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 24 THEN
				CONCAT(HOUR(TIMEDIFF(NOW(), createDate)), '시간 전')
			ELSE DATE_FORMAT(createDate, '%Y-%m-%d')
			END AS createDate
		FROM reply
		LEFT JOIN member ON(member.id = reply.writerId)
		WHERE boardNo = #{boardNo} AND status = 1
		ORDER BY commentNo, replyNo;
	</select>
	
	<!-- 게시글 작성 -->
	<insert id="writeBoard" parameterType="boardDto">
		INSERT INTO board(title, content, createDate, writerId, folder, originName, saveName)
		VALUES(#{title}, #{content}, NOW(), #{writerId}, #{folder}, #{originName}, #{saveName});
	</insert>
	
	<!-- 댓글 작성 -->
	<insert id="writeComment" parameterType="commentDto">
		INSERT INTO comment(boardNo, content, createDate, writerId, status)
		VALUES(#{boardNo}, #{content}, NOW(), #{writerId}, 1);
	</insert>
	
	<!-- 대댓글 작성 -->
	<insert id="writeReply" parameterType="replyCommentDto">
		INSERT INTO reply(commentNo, boardNo, content, createDate, writerId, status)
		VALUES(#{commentNo}, #{boardNo}, #{content}, NOW(), #{writerId}, 1)
	</insert>
	
	<!-- 게시물 수정 -->
	<update id="modifyBoard" parameterType="boardDto">
		UPDATE board
		SET title = #{title}, content=#{content}, updateDate=NOW(), folder=#{folder}, originName=#{originName}, saveName=#{saveName}
		WHERE boardNo = #{boardNo}
	</update>
	
	<!-- 댓글 수정 -->
	<update id="modifyComment" parameterType="commentDto">
		UPDATE comment
		SET content=#{content}
		WHERE commentNo = #{commentNo}
	</update>
	
	<!-- 대댓글 수정 -->
	<update id="modifyReply" parameterType="replyCommentDto">
		UPDATE reply
		SET content=#{content}
		WHERE replyNo = #{replyNo}
	</update>
	
	<!-- 게시물 삭제 -->
	<update id="deleteBoard" parameterType="String">
		UPDATE board
		SET status = 0
		WHERE boardNo = #{boardNo}
	</update>
	
	<!-- 댓글 삭제 -->
	<update id="deleteComment" parameterType="String">
		UPDATE comment
		SET status = 0
		WHERE commentNo = #{commentNo}
	</update>
	
	<!-- 대댓글 삭제 -->
	<update id="deleteReply" parameterType="String">
		UPDATE reply
		SET status = 0
		WHERE replyNo = #{replyNo}
	</update>

	<!-- 좋아요 설정 -->
	<insert id="likeBoard" parameterType="String">
		INSERT INTO likes(boardNo, createDate, Id)
		VALUES(#{boardNo}, NOW(), #{id})
	</insert>

	<!-- 좋아요 해제 -->
	<delete id="dislikeBoard" parameterType="String">
		DELETE FROM likes
		WHERE boardNo=#{boardNo} AND Id=#{id}
	</delete>

	<!-- 내가 쓴 글 목록 -->
	<select id="getMyBoards" parameterType="String">
		SELECT boardNo, title, hit, folder, saveName, originName, LEFT(content, 50) content,
			CASE
				WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 1 THEN
					CONCAT(MINUTE(TIMEDIFF(NOW(), createDate)), '분 전')
				WHEN HOUR(TIMEDIFF(NOW(), createDate)) <![CDATA[ <= ]]> 24 THEN
					CONCAT(HOUR(TIMEDIFF(NOW(), createDate)), '시간 전')
				ELSE DATE_FORMAT(createDate, '%Y-%m-%d')
			END AS createDate
		FROM board
		WHERE status = 1 AND writerId = #{id};
	</select>

	<!-- 내가 쓴 댓글이 있는 글 목록 -->
	<select id="getMyCommentBoards" parameterType="String">
		SELECT DISTINCT(board.boardNo), title, hit, folder, saveName, originName, LEFT(board.content, 50) content,
			CASE
				WHEN HOUR(TIMEDIFF(NOW(), board.createDate)) <![CDATA[ <= ]]> 1 THEN
					CONCAT(MINUTE(TIMEDIFF(NOW(), board.createDate)), '분 전')
				WHEN HOUR(TIMEDIFF(NOW(), board.createDate)) <![CDATA[ <= ]]> 24 THEN
					CONCAT(HOUR(TIMEDIFF(NOW(), board.createDate)), '시간 전')
				ELSE DATE_FORMAT(board.createDate, '%Y-%m-%d')
			END AS createDate
		FROM comment
		LEFT JOIN reply USING (commentNo)
		LEFT JOIN board ON board.boardNo = comment.boardNo
		WHERE (board.status = 1 AND comment.writerId = #{id}) OR (reply.writerId = #{id} AND reply.status = 1);
	</select>

	<!-- 내가 좋아요 한 글 목록 -->
	<select id="getMyLikeBoards" parameterType="String">
		SELECT DISTINCT(likes.boardNo), title, hit, folder, saveName, originName, LEFT(content, 50) content,
			CASE
			WHEN HOUR(TIMEDIFF(NOW(), board.createDate)) <![CDATA[ <= ]]> 1 THEN
				CONCAT(MINUTE(TIMEDIFF(NOW(), board.createDate)), '분 전')
			WHEN HOUR(TIMEDIFF(NOW(), board.createDate)) <![CDATA[ <= ]]> 24 THEN
				CONCAT(HOUR(TIMEDIFF(NOW(), board.createDate)), '시간 전')
			ELSE DATE_FORMAT(board.createDate, '%Y-%m-%d')
			END AS createDate
		FROM likes
		LEFT JOIN board USING (boardNo)
		WHERE status = 1 AND Id = #{id};
	</select>

	<!-- 최신글 3개 -->
	<select id="getNewList" parameterType="String">
		SELECT boardNo, title
		FROM board
		WHERE status = 1
        ORDER BY createDate desc
		LIMIT 3;
	</select>

	<!-- 회원탈퇴 시 게시물 삭제-->
	<update id="deleteUserBoard" parameterType="Long">
		UPDATE board
		SET status = 0
		WHERE writerId = #{id}
	</update>

	<!-- 회원탈퇴 시 댓글 삭제-->
	<update id="deleteUserComment" parameterType="Long">
		UPDATE comment
		SET status = 0
		WHERE writerId = #{id}
	</update>

	<!-- 회원탈퇴 시 대댓글 삭제-->
	<update id="deleteUserReply" parameterType="Long">
		UPDATE reply
		SET status = 0
		WHERE writerId = #{id}
	</update>
</mapper>